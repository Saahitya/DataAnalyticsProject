probabilities[[p]] = 0;
}
}
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
for(p in 1:length(probabilities)) {
if(p >= 0.5){
probabilities[[p]] = 1;
}
else{
probabilities[[p]] = 0;
}
}
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
for(p in 1:length(probabilities)) {
if(p >= 0.5){
probabilities[[p]] = 1;
}
else{
probabilities[[p]] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(p >= 0.5){
probabilities[[p]] = 1;
}
else{
probabilities[[p]] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(p >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(p >= 0.5){
probabilities[p] = 1;
print(p)
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(p >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
print(p)
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(p >= 0){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(p >= 5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_orig
test_data$predicted_mod_Y
test_data$Pass
View(test_data)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_orig <- make_pass_fail(predicted_mod_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_mod <- make_pass_fail(predicted_mod_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_mod <- make_pass_fail(predicted_mod_Y)
test_data$pred_orig
test_data$pred_mod
test_data$Pass
View(test_data)
confusionMatrix(test_data$Pass, test_data$pred_orig)
levels(test_data$Pass)
confusionMatrix(test_data$Pass, test_data$pred_orig)
levels(test_data$Pass)
test_data$pred_orig
confusionMatrix(test_data$Pass, test_data$pred_orig)
levels(test_data$Pass)
levels(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig)
typeof(test_data$Pass)
levels(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig)
typeof(factor(test_data$Pass))
levels(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig)
typeof(factor(test_data$Pass))
typeof(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(integer(probabilities))
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_mod <- make_pass_fail(predicted_mod_Y)
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilities <- as.numeric(probabilities)
probabilites <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_mod <- make_pass_fail(predicted_mod_Y)
test_data$pred_orig
test_data$pred_mod
test_data$Pass
View(test_data)
typeof(factor(test_data$Pass))
typeof(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig)
test_data$Pass
test_data$pred_orig
confusionMatrix(test_data$Pass, test_data$pred_orig)
levels(test_data$Pass)
test_data$pred_orig
confusionMatrix(test_data$Pass, test_data$pred_orig)
sapply(test_data$Pass, levels)
test_data$pred_orig
confusionMatrix(test_data$Pass, test_data$pred_orig)
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
confusionMatrix(test_data$Pass, test_data$pred_orig)
sapply(factor(test_data$Pass), levels)
sapply(factor(test_data$pred_orig), levels)
confusionMatrix(test_data$Pass, test_data$pred_orig)
sapply(factor(test_data$Pass), levels)
sapply(factor(test_data$pred_orig), levels)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
sapply(factor(test_data$Pass), levels)
sapply(factor(test_data$pred_orig), levels)
factor(test_data$Pass)
factor(test_data$pred_orig)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
#sapply(factor(test_data$Pass), levels)
#sapply(factor(test_data$pred_orig), levels)
factor(test_data$Pass)
factor(test_data$pred_orig)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilities <- as.numeric(probabilities)
probabilities <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_mod <- make_pass_fail(predicted_mod_Y)
test_data$pred_orig
test_data$pred_mod
test_data$Pass
View(test_data)
#sapply(factor(test_data$Pass), levels)
sapply(factor(test_data$pred_orig), levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
sapply(factor(test_data$Pass), levels)
sapply(factor(test_data$pred_orig), levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
sapply(factor(test_data$Pass), levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
test_data <- read.csv("Test - Sheet1.csv")
names(test_data)[names(test_data) == "Popularity"] <- "popularity"
test_data$Pass <- factor(test_data$Pass)
#test_data$popularity <- test_data$popularity*10
predicted_orig_Y <- predict(orig_model, test_data, type="response")
predicted_mod_Y <- predict(mod_model, test_data, type="response")
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilities <- as.numeric(probabilities)
probabilities <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_mod <- make_pass_fail(predicted_mod_Y)
test_data$pred_orig
test_data$pred_mod
test_data$Pass
View(test_data)
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(factor(test_data$Pass), factor(test_data$pred_orig))
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig)
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig, positive=1)
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig, positive="1"")
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig, positive="1")
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig, positive="1")
confusionMatrix(test_data$Pass, test_data$mod_orig, positive="1")
mod_model <- glm(Pass ~ Day4 + Athlete, family="binomial", data = up_pass_school_data)
#model
summary(mod_model)
confint.default(mod_model)
test_data <- read.csv("Test - Sheet1.csv")
names(test_data)[names(test_data) == "Popularity"] <- "popularity"
test_data$Pass <- factor(test_data$Pass)
#test_data$popularity <- test_data$popularity*10
predicted_orig_Y <- predict(orig_model, test_data, type="response")
predicted_mod_Y <- predict(mod_model, test_data, type="response")
make_pass_fail <- function(probabilities) {
print(probabilities)
for(p in 1:length(probabilities)) {
if(probabilities[p] >= 0.5){
probabilities[p] = 1;
}
else{
probabilities[p] = 0;
}
}
print(probabilities)
probabilities <- as.numeric(probabilities)
probabilities <- factor(probabilities)
return(probabilities)
}
test_data$pred_orig <- make_pass_fail(predicted_orig_Y)
test_data$pred_mod <- make_pass_fail(predicted_mod_Y)
test_data$pred_orig
test_data$pred_mod
test_data$Pass
View(test_data)
sapply(test_data$Pass, levels)
sapply(test_data$pred_orig, levels)
sapply(test_data$pred_mod, levels)
#factor(test_data$Pass)
#factor(test_data$pred_orig)
confusionMatrix(test_data$Pass, test_data$pred_orig, positive="1")
confusionMatrix(test_data$Pass, test_data$pred_mod, positive="1")
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$Pass, test_data$pred_orig, positive="1")
confusionMatrix(test_data$Pass, test_data$pred_mod, positive="1")
?confusionMatrix
?confusionMatrix
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$pred_orig, test_data$Pass, positive="1")
confusionMatrix(test_data$pred_mod, test_data$Pass, positive="1")
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$pred_orig, test_data$Pass)#, positive="1")
confusionMatrix(test_data$pred_mod, test_data$Pass)#, positive="1")
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$pred_orig, test_data$Pass, positive="1")
confusionMatrix(test_data$pred_mod, test_data$Pass, positive="1")
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$pred_orig, test_data$Pass#), positive="1")
confusionMatrix(test_data$pred_mod, test_data$Pass, positive="1")
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$pred_orig, test_data$Pass)#, positive="1")
confusionMatrix(test_data$pred_mod, test_data$Pass, positive="1")
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$pred_orig, test_data$Pass), positive="1")
#sapply(test_data$Pass, levels)
#sapply(test_data$pred_orig, levels)
#sapply(test_data$pred_mod, levels)
confusionMatrix(test_data$pred_orig, test_data$Pass, positive="1")
confusionMatrix(test_data$pred_mod, test_data$Pass, positive="1")
source('~/Desktop/5th-SEM-Stuff/DataAnalytics/DataAnalyticsProject/tests/import_dataset.r', echo=TRUE)
source('~/Desktop/5th-SEM-Stuff/DataAnalytics/DataAnalyticsProject/tests/import_dataset.r', echo=TRUE)
source('~/Desktop/5th-SEM-Stuff/DataAnalytics/DataAnalyticsProject/tests/import_dataset.r', echo=TRUE)
#user  system elapsed
#161.140   1.384 162.959
#user  system elapsed
#117.564   0.616 118.189
head(df)
system.time(df <- read.csv("Desktop/5th-SEM-Stuff/DataAnalytics/DataAnalyticsProject/data/Vehicle_Information.csv.bz2"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
list.file(path="../data")
getwd()
getwd()
setwd("Desktop/5th-SEM-Stuff/DataAnalytics/DataAnalyticsProject/")
list.files("data/")
system.time(Accident_data <- read.csv("../data/Accident_Information.csv.bz2"))
system.time(Accident_data <- read.csv("/data/Accident_Information.csv.bz2"))
system.time(Accident_data <- read.csv("data/Accident_Information.csv.bz2"))
system.time(Vehicle_data <- read.csv("data//Vehicle_Information.csv.bz2"))
str(Accident_data)
